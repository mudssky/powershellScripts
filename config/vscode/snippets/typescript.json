{
  // Place your snippets for typescript here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  "Print to console": {
    "prefix": "print",
    "body": ["console.log('$1');", "$2"],
    "description": "Log output to console"
  },
  // antd组件相关的hook
  "hook empty": {
    "prefix": "he",
    "body": [
      "export function ${1:useSetupHook}() {",
      "$2",
      "  return {",
      "  }",
      "}",
      ""
    ],
    "description": "react hook with antd form"
  },
  // antd组件相关的hook
  "hook with form(antd)": {
    "prefix": "hf",
    "body": [
      "import { Form } from 'antd'",
      "import { Props } from '.'",
      "",
      "export function ${1:useSetupHook}(props:Props) {",
      "  const [form] = Form.useForm()",
      "  return {",
      "    form,",
      "  }",
      "}",
      ""
    ],
    "description": "react hook with antd form"
  },
  "hook with form reducer(antd)": {
    "prefix": "hfr",
    "body": [
      "import { Form } from 'antd'",
      "import { Props } from '.'",
      "import {reducer, initialState } from './reducer'",
      "import { useReducer } from 'react'",
      "",
      "export function useSetupHook(props: Props) {",
      "  const [form] = Form.useForm()",
      "  const { value } = props",
      "  const [state, dispatch] = useReducer(reducer, initialState)",
      "  return {",
      "    state,",
      "    form,",
      "  }",
      "}"
    ],
    "description": "react hook with antd form"
  },
  "handle submit": {
    "prefix": "bc",
    "body": [
      "  const ${1:handleSumbit} = async () => {",
      "    const formValues = await form.validateFields()",
      "    console.log({ formValues })",
      "    setIsloading(true)",
      "    const res = await ${2:SAVE_WORKPLAN}({",
      "      ...formValues,",
      "    })",
      "    if (res.code.startsWith('s')) {",
      "      message.success('${3:操作成功}')",
      "    } else {",
      "      message.error(res.msg)",
      "    }",
      "    setIsloading(false)",
      "  }"
    ],
    "description": "crud add"
  },
  "for reverse loop": {
    "prefix": "forr",
    "body": [
      "for (let ${1:index} = ${2:array}.length-1; ${1:index} >= 0; ${1:index}--) {",
      "  const ${3:element} = ${2:array}[${1:index}];",
      "  ",
      "}"
    ],
    "description": "crud add"
  }
}
