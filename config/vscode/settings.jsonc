{
  //========== ahk ==========
  "[ahk]": {
    "editor.defaultFormatter": "mark-wiemer.vscode-autohotkey-plus-plus"
  },
  //========== dart ==========
  // dart官方推荐配置
  "[dart]": {
    "editor.formatOnSave": true,
    "editor.formatOnType": true,
    "editor.rulers": [80],
    "editor.selectionHighlight": false,
    "editor.suggest.snippetsPreventQuickSuggestions": false,
    "editor.suggestSelection": "first",
    // "editor.tabCompletion": "onlySnippets",
    "editor.wordBasedSuggestions": "off"
  },
  "dart.openDevTools": "flutter",
  //========== editor ==========
  "editor.formatOnSave": true,
  "editor.formatOnPaste": true,
  "editor.formatOnType": false,
  // 键入tab时使用空格代替
  "editor.insertSpaces": true,
  // 展示行号
  "editor.lineNumbers": "on",
  // taiwindCss需要在字符串中显示快速建议,这个还是在使用tailwind的项目中手动配置一下
  // 免得占用性能
  // "editor.quickSuggestions": {
  //   "strings": true
  // },
  "editor.inlineSuggest.enabled": true,
  "editor.fontFamily": "'JetBrains Mono','FiraCode NF Retina', 'FiraCode NF','Fira Code',Iosevka, Consolas, 'Cascadia Code', 'Courier New', 'Source Code Pro'",
  "editor.fontSize": 13,
  "editor.lineHeight": 1.2,
  "editor.fontLigatures": true,
  "editor.stickyScroll.enabled": true,
  // 关闭无障碍支持
  "editor.accessibilitySupport": "off",
  "editor.tabCompletion": "off",
  "editor.wordSeparators": "`~!@#$%^&*()-=+[{]}\\|;:'\",.<>/?",
  // 关闭代码缩略图,比较鸡肋
  "editor.minimap.autohide": true,
  "editor.minimap.enabled": false,
  // 可以用鼠标滚轮调整字体大小。因为一般用ctrl+ 整体放大的，所以以前一直没有开过这个配置
  "editor.mouseWheelZoom": false,
  // 显示折行，一般用格式化插件比如prettier实际换行的，这个折行消耗性能可以不开
  "editor.wordWrap": "off",
  // 增加滚动和光标移动的动画，会显得更丝滑
  // 感觉动画不是很明显
  // "editor.smoothScrolling": true,
  // "editor.cursorBlinking": "smooth",
  // "workbench.list.smoothScrolling": true,

  //========== theme ui ==========
  // 主题和全局配置
  "workbench.startupEditor": "none",
  // 使用新的profile ui，因为升级1.92后，旧ui有bug
  "workbench.experimental.enableNewProfilesUI": true,
  "workbench.iconTheme": "material-icon-theme",
  "workbench.colorTheme": "Quiet Light",

  // 自动保存,因为已经配置了保存时自动格式化了,
  // 而且保存一般会触发服务重渲染，所以不要太频繁
  // 这里设置为5分钟
  "files.autoSave": "afterDelay",
  "files.autoSaveDelay": 300000,
  // 自动判断文件编码，还是关了，因为一般都是utf8编码
  // "files.autoGuessEncoding": false,
  //========== debug ==========
  "debug.openDebug": "openOnDebugBreak",
  //========== extensions ==========
  // xml插件
  "redhat.telemetry.enabled": false,
  // better comments插件
  "better-comments.tags": [
    {
      "tag": "!",
      "color": "#FF2D00",
      "strikethrough": false,
      "underline": false,
      "backgroundColor": "transparent",
      "bold": false,
      "italic": false
    },
    {
      "tag": "?",
      "color": "#3498DB",
      "strikethrough": false,
      "underline": false,
      "backgroundColor": "transparent",
      "bold": false,
      "italic": false
    },
    {
      "tag": "//",
      "color": "#474747",
      "strikethrough": true,
      "underline": false,
      "backgroundColor": "transparent",
      "bold": false,
      "italic": false
    },
    {
      "tag": "todo",
      "color": "#FF8C00",
      "strikethrough": false,
      "underline": false,
      "backgroundColor": "transparent",
      "bold": false,
      "italic": false
    },
    {
      "tag": "*",
      "color": "#98C379",
      "strikethrough": false,
      "underline": false,
      "backgroundColor": "transparent",
      "bold": false,
      "italic": false
    }
  ],
  // 配置unicode-latex支持的文件格式
  "unicode-latex.extensions": ["plaintext", "markdown", "coq", "ipynb", "py"],
  // git提交插件配置最大标题长度
  "GitCommitPlugin.MaxSubjectCharacters": 100,
  //   Codegeex
  "Codegeex.CandidateNum": "2 (medium)",
  "Codegeex.Privacy": false,
  //========== frontend ==========
  "javascript.updateImportsOnFileMove.enabled": "always",
  "typescript.updateImportsOnFileMove.enabled": "always",
  // 避免css被关联到postcss
  "files.associations": {
    "*.css": "css"
    // json 默认关联到jsonc，方便我们写注释
    // "*.json":"jsonc"
  },

  // palywright相关配置
  "playwright.reuseBrowser": true,
  "[typescriptreact]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[scss]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[javascript]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[json]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[typescript]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[html]": {
    "editor.defaultFormatter": "vscode.html-language-features"
  },
  "[jsonc]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[postcss]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[css]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[dockerfile]": {
    "editor.defaultFormatter": "ms-azuretools.vscode-docker"
  },
  //========== git ==========
  "git.enableSmartCommit": true,
  "gitlens.views.worktrees.files.layout": "list",
  "gitlens.gitCommands.skipConfirmations": [
    "fetch:command",
    "stash-push:command",
    "switch:command",
    "stash-apply:command"
  ],
  //========== Golang ==========
  "go.useLanguageServer": true,
  "go.toolsManagement.autoUpdate": true,
  //========== julia ==========
  "terminal.integrated.commandsToSkipShell": ["language-julia.interrupt"],
  "julia.enableTelemetry": false,
  "julia.symbolCacheDownload": true,
  "[julia]": {
    "editor.defaultFormatter": "julialang.language-julia"
  },
  //========== markdown ==========
  "markdown-preview-enhanced.enableScriptExecution": true,
  "markdown-preview-enhanced.liveUpdate": true,
  "markdown-preview-enhanced.enableHTML5Embed": true,
  "markdown-preview-enhanced.printBackground": true,
  "[markdown]": {
    "editor.wordWrap": "on",
    "editor.quickSuggestions": {
      "comments": "off",
      "strings": "off",
      "other": "off"
    },
    "editor.defaultFormatter": "DavidAnson.vscode-markdownlint"
  },
  // 将这些 Ctrl 快捷键组合发送给 Neovim 在 Normal 模式下处理
  "vscode-neovim.ctrlKeysForNormalMode": [
    "v" // Ctrl+v: 可视化块模式
  ],
  // 将这些 Ctrl 快捷键组合发送给 Neovim 在 Insert 模式下处理
  "vscode-neovim.ctrlKeysForInsertMode": [],
  //========== python ==========
  "workbench.editorAssociations": {
    "*.ipynb": "jupyter-notebook",
    "{git,gitlens}:/**/*.{md,csv,svg}": "default"
  },
  "[python]": {
    "editor.defaultFormatter": "charliermarsh.ruff"
  },
  "notebook.cellToolbarLocation": {
    "default": "right",
    "jupyter-notebook": "left"
  },
  "jupyter.askForKernelRestart": false,
  //========== terminal ==========
  "terminal.integrated.defaultProfile.windows": "PowerShell",
  "terminal.integrated.fontFamily": "'FiraCode NF Retina', 'JetBrains Mono', 'FiraCode Nerd Font', 'FiraCode Nerd Font Mono','Cascadia Mono'",
  "terminal.integrated.defaultProfile.linux": "zsh",
  "terminal.integrated.profiles.windows": {
    "PowerShell": {
      "source": "PowerShell",
      "icon": "terminal-powershell"
    },
    "Command Prompt": {
      "path": [
        "${env:windir}\\Sysnative\\cmd.exe",
        "${env:windir}\\System32\\cmd.exe"
      ],
      "args": [],
      "icon": "terminal-cmd"
    },
    "Git Bash": {
      "source": "Git Bash"
    },
    "Windows PowerShell": {
      "path": "C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe"
    }
  },
  "powershell.promptToUpdatePowerShell": false,
  "powershell.integratedConsole.focusConsoleOnExecute": true,
  "powershell.buttons.showPanelMovementButtons": false,
  "[powershell]": {
    "editor.defaultFormatter": "ms-vscode.powershell"
  },
  //========== 下面是trea相关配置 ==========
  // 语言不用配置
  //   "AI.chatLanguage": "简体中文",
  "AI.toolcall.confirmMode": "autoRun",
  "trae.tab.enableAutoImport": true,
  "trae.tab.enableAutoRename": true,
  //========== 下面是vscodeVim和whichKey相关配置 ==========
  // 两个 <leader> 配合其他移动，搜索操作触发
  "vim.easymotion": true,
  // 搜索时显示下一个匹配
  "vim.incsearch": true,
  // 使用系统剪切板存放 unname寄存器，这样可以用yy复制了。
  "vim.useSystemClipboard": true,
  // 支持部分ctrl 快捷键的使用,比如copy, paste, find
  "vim.useCtrlKeys": true,
  // 高亮所有搜索项
  "vim.hlsearch": true,
  // log等级，可以用于调试映射  'error', 'warn', 'info', 'verbose', 'debug'
  // "vim.debug.loggingLevelForAlert":"error"
  // 默认前导键就是反斜杠：
  // "vim.leader": "<space>",
  // "vim.shell": "C:/Program Files/PowerShell/7/pwsh.exe",
  // ReplaceWithRegister插件，可以用寄存器中的内容替换，这下解决粘贴替换字符串内容的难题了
  // 因为vim默认操作下，dd和yy都会复制到一个寄存器，粘贴替换字符串，是两步操作
  //   [count]["x]gr{motion} 将 {motion} 文本替换为寄存器 x 的内容。
  //                         特别是当使用未命名寄存器时，这是
  //                         比“_d{motion}P”或“_c{motion}<CR>”快
  // [count]["x]grr 将 [count] 行替换为寄存器 x 的内容。
  //                         替换从光标位置到末尾
  //                         行使用 ["x]gr$
  // {Visual}["x]gr 用寄存器 x 的内容替换所选内容。
  // 实战常用 gri",就能替换字符串
  "vim.replaceWithRegister": true,
  "vim.insertModeKeyBindings": [
    {
      "before": ["j", "j"],
      "after": ["<Esc>"]
    },
    // 替换原来的ctrl+r
    // 用于插入模式从寄存器粘贴值
    {
      "before": ["<Leader>", "r"],
      "after": ["<C-r>"]
    }
  ],
  "vim.normalModeKeyBindingsNonRecursive": [
    // 取消高亮
    {
      "before": ["<leader>", "n"],
      "commands": [":nohl"]
    },
    {
      "before": ["<space>"],
      "commands": ["whichkey.show"]
    },
    // 书签相关功能
    {
      "before": ["<leader>", "b", "t"],
      "commands": ["bookmarks.toggle"]
    },
    {
      "before": ["<leader>", "b", "l"],
      "commands": ["bookmarks.listFromAllFiles"]
    }
  ],
  "vim.visualModeKeyBindingsNonRecursive": [
    {
      "before": ["<space>"],
      "commands": ["whichkey.show"]
    },
    // 支持选择模式下，连续调整缩进
    {
      "before": [">"],
      "commands": ["editor.action.indentLines"]
    },
    {
      "before": ["<"],
      "commands": ["editor.action.outdentLines"]
    }
  ],
  // 取消部分快捷键的拦截
  "vim.handleKeys": {
    // 在vscode里面可以用于加光标，比较有用、
    // vim里面主要是翻页，可以用pageDown代替
    "<C-d>": false,
    // vscode撤销上次光标操作，vim里的向上翻页
    "<C-u>": false,
    // 搜索
    "<C-f>": false,
    // 一些快捷键的起手
    "<C-k>": false,
    // 这两个键在vim里面是给光标下的数字加减，用处不大(能做一点简单计算)。
    "<C-a>": false,
    "<C-x>": false,
    // vim里面没什么用，但是复制还是比较常用的
    "<C-c>": false,
    "<C-.>": false,
    // vim中没什么用，但是作为vscode快捷键，可以toggle侧边栏
    "<C-b>": false,
    // ctrl+r 在vim中是在插入模式时插入寄存器内容的，还是比较实用.
    // 和vscode 打开最近文件撞车了。所以这个功能移到leader键上
    "<C-r>": false,
    // vscode快速打开指定文件
    "<C-e>": false,
    // vscode 打开项目文件
    "<C-p>": false,
    // 这两个vscode中是调整缩进,vim中<C-]>是跳转定义，因为习惯用f12，所以这个还是作为vscode的快捷键问题不大
    "<C-]>": false,
    "<C-[>": false,
    // vscode中 选中当前行
    "<C-l>": false,
    // vscode中的功能是滚动 滚动条比较鸡肋，vim插件没有覆盖这个功能
    // "<C-up>": false,
    // "<C-down>": false
    // 这个vim中和ctrl+o一样是源码回退，因此我保留ctrl+o
    // 这个在vscode中展示symbol，也就是搜索源码中的符号
    "<C-t>": false,
    // 跳转行
    "<C-g>": false,
    // vscode中可以切换tab键的工作方式，切换到一个专注移动的模式
    // 而不是打出空格
    "<C-m>": false,
    // 下面两个是vscode的智能建议
    "<C-space>": false,
    "<C-i>": false,
    // 替换
    "<C-h>": false
  },
  // 输入法切换相关配置
  // 自动切换，会在离开插入模式时禁用输入法
  // 需要安装切换输入法的命令行插件，不是很方便。
  // "vim.autoSwitchInputMethod.enable": true,
  // To improve performance,
  "extensions.experimental.affinity": {
    "vscodevim.vim": 1
  },
  //========== 下面是whichKey相关配置 ==========
  // ### whichkey 相关配置
  "whichkey.bindings": [
    {
      "key": "w",
      "name": "保存文件",
      "type": "command",
      "command": "workbench.action.files.save"
    },
    {
      "key": "f",
      "name": "查找",
      "type": "bindings",
      "bindings": [
        {
          "key": "f",
          "name": "查找文件",
          "type": "command",
          "command": "workbench.action.quickOpen"
        },
        {
          "key": "g",
          "name": "在文件中查找",
          "type": "command",
          "command": "workbench.action.findInFiles"
        },
        {
          "key": "s",
          "name": "查找符号",
          "type": "command",
          "command": "workbench.action.gotoSymbol"
        }
      ]
    },
    {
      "key": "e",
      "name": "切换资源管理器",
      "type": "command",
      "command": "workbench.view.explorer"
    },
    {
      "key": "g",
      "name": "切换 Git",
      "type": "command",
      "command": "workbench.view.scm"
    },
    {
      "key": "x",
      "name": "切换扩展",
      "type": "command",
      "command": "workbench.view.extensions"
    },
    {
      "key": "c",
      "name": "代码",
      "type": "bindings",
      "bindings": [
        {
          "key": "a",
          "name": "代码操作",
          "type": "command",
          "command": "editor.action.quickFix"
        },
        {
          "key": "r",
          "name": "重命名符号",
          "type": "command",
          "command": "editor.action.rename"
        },
        {
          "key": "f",
          "name": "格式化文档",
          "type": "command",
          "command": "editor.action.formatDocument"
        }
      ]
    },
    {
      "key": "l",
      "name": "LSP",
      "type": "bindings",
      "bindings": [
        {
          "key": "r",
          "name": "查找引用",
          "type": "command",
          "command": "editor.action.goToReferences"
        },
        {
          "key": "i",
          "name": "转到实现",
          "type": "command",
          "command": "editor.action.goToImplementation"
        },
        {
          "key": "t",
          "name": "转到类型定义",
          "type": "command",
          "command": "editor.action.goToTypeDefinition"
        },
        {
          "key": "d",
          "name": "转到定义",
          "type": "command",
          "command": "editor.action.revealDefinition"
        }
      ]
    },
    {
      "key": "b",
      "name": "书签/buffer",
      "type": "bindings",
      "bindings": [
        {
          "key": "t",
          "name": "切换书签",
          "type": "command",
          "command": "bookmarks.toggle"
        },
        {
          "key": "l",
          "name": "列出所有书签",
          "type": "command",
          "command": "bookmarks.listFromAllFiles"
        }
      ]
    },
    {
      "key": "t",
      "name": "切换终端",
      "type": "command",
      "command": "workbench.action.terminal.toggleTerminal"
    },
    {
      "key": "p",
      "name": "切换面板",
      "type": "command",
      "command": "workbench.action.togglePanel"
    },
    {
      "key": "/",
      "name": "切换注释",
      "type": "command",
      "command": "editor.action.commentLine"
    }
  ]
}
