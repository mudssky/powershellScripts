//========== 下面是vscodeVim和whichKey相关配置 ==========
{
  // 两个 <leader> 配合其他移动，搜索操作触发
  "vim.easymotion": true,
  // 搜索时显示下一个匹配
  "vim.incsearch": true,
  // 使用系统剪切板存放 unname寄存器，这样可以用yy复制了。
  "vim.useSystemClipboard": true,
  // 支持部分ctrl 快捷键的使用,比如copy, paste, find
  "vim.useCtrlKeys": true,
  // 高亮所有搜索项
  "vim.hlsearch": true,
  // log等级，可以用于调试映射  'error', 'warn', 'info', 'verbose', 'debug'
  // "vim.debug.loggingLevelForAlert":"error"
  // 默认前导键就是反斜杠：
  // "vim.leader": "<space>",
  // "vim.shell": "C:/Program Files/PowerShell/7/pwsh.exe",
  // ReplaceWithRegister插件，可以用寄存器中的内容替换，这下解决粘贴替换字符串内容的难题了
  // 因为vim默认操作下，dd和yy都会复制到一个寄存器，粘贴替换字符串，是两步操作
  //   [count]["x]gr{motion} 将 {motion} 文本替换为寄存器 x 的内容。
  //                         特别是当使用未命名寄存器时，这是
  //                         比“_d{motion}P”或“_c{motion}<CR>”快
  // [count]["x]grr 将 [count] 行替换为寄存器 x 的内容。
  //                         替换从光标位置到末尾
  //                         行使用 ["x]gr$
  // {Visual}["x]gr 用寄存器 x 的内容替换所选内容。
  // 实战常用 gri",就能替换字符串
  "vim.replaceWithRegister": true,
  "vim.insertModeKeyBindings": [
    {
      "before": ["j", "j"],
      "after": ["<Esc>"]
    },
    // 替换原来的ctrl+r
    // 用于插入模式从寄存器粘贴值
    {
      "before": ["<Leader>", "r"],
      "after": ["<C-r>"]
    }
  ],
  "vim.normalModeKeyBindingsNonRecursive": [
    // 取消高亮
    {
      "before": ["<leader>", "n"],
      "commands": [":nohl"]
    },
    {
      "before": ["<space>"],
      "commands": ["whichkey.show"]
    },
    // 书签相关功能
    {
      "before": ["<leader>", "b", "t"],
      "commands": ["bookmarks.toggle"]
    },
    {
      "before": ["<leader>", "b", "l"],
      "commands": ["bookmarks.listFromAllFiles"]
    }
  ],
  "vim.visualModeKeyBindingsNonRecursive": [
    {
      "before": ["<space>"],
      "commands": ["whichkey.show"]
    },
    // 支持选择模式下，连续调整缩进
    {
      "before": [">"],
      "commands": ["editor.action.indentLines"]
    },
    {
      "before": ["<"],
      "commands": ["editor.action.outdentLines"]
    }
  ],
  // 取消部分快捷键的拦截
  "vim.handleKeys": {
    // 在vscode里面可以用于加光标，比较有用、
    // vim里面主要是翻页，可以用pageDown代替
    "<C-d>": false,
    // vscode撤销上次光标操作，vim里的向上翻页
    "<C-u>": false,
    // 搜索
    "<C-f>": false,
    // 一些快捷键的起手
    "<C-k>": false,
    // 这两个键在vim里面是给光标下的数字加减，用处不大(能做一点简单计算)。
    "<C-a>": false,
    "<C-x>": false,
    // vim里面没什么用，但是复制还是比较常用的
    "<C-c>": false,
    "<C-.>": false,
    // vim中没什么用，但是作为vscode快捷键，可以toggle侧边栏
    "<C-b>": false,
    // ctrl+r 在vim中是在插入模式时插入寄存器内容的，还是比较实用.
    // 和vscode 打开最近文件撞车了。所以这个功能移到leader键上
    "<C-r>": false,
    // vscode快速打开指定文件
    "<C-e>": false,
    // vscode 打开项目文件
    "<C-p>": false,
    // 这两个vscode中是调整缩进,vim中<C-]>是跳转定义，因为习惯用f12，所以这个还是作为vscode的快捷键问题不大
    "<C-]>": false,
    "<C-[>": false,
    // vscode中 选中当前行
    "<C-l>": false,
    // vscode中的功能是滚动 滚动条比较鸡肋，vim插件没有覆盖这个功能
    // "<C-up>": false,
    // "<C-down>": false
    // 这个vim中和ctrl+o一样是源码回退，因此我保留ctrl+o
    // 这个在vscode中展示symbol，也就是搜索源码中的符号
    "<C-t>": false,
    // 跳转行
    "<C-g>": false,
    // vscode中可以切换tab键的工作方式，切换到一个专注移动的模式
    // 而不是打出空格
    "<C-m>": false,
    // 下面两个是vscode的智能建议
    "<C-space>": false,
    "<C-i>": false,
    // 替换
    "<C-h>": false
  }
  // 输入法切换相关配置
  // 自动切换，会在离开插入模式时禁用输入法
  // 需要安装切换输入法的命令行插件，不是很方便。
  // "vim.autoSwitchInputMethod.enable": true,
  // ### whichkey 相关配置
  // "whichkey.bindingOverrides": [
  //   {
  //     "keys": "j",
  //     "name": "jump,join",
  //     "type": "bindings",
  //     "bindings": [
  //       {
  //         "key": "l",
  //         "name": "jump or select to a line (easymotion)",
  //         "type": "command",
  //         "command": "vim.",
  //       }
  //     ]
  //   }
  // ],
}
